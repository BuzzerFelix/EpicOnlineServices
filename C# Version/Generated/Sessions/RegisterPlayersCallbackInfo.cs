// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Sessions
{
	public class RegisterPlayersCallbackInfo : ICallbackInfo, ISettable
	{
		/// <summary>
		/// The <see cref="Result" /> code for the operation. <see cref="Result.Success" /> indicates that the operation succeeded; other codes indicate errors.
		/// </summary>
		public Result ResultCode { get; private set; }

		/// <summary>
		/// Context that was passed into <see cref="SessionsInterface.RegisterPlayers" />
		/// </summary>
		public object ClientData { get; private set; }

		/// <summary>
		/// The players that were successfully registered
		/// </summary>
		public ProductUserId[] RegisteredPlayers { get; private set; }

		/// <summary>
		/// The players that failed to register because they are sanctioned
		/// </summary>
		public ProductUserId[] SanctionedPlayers { get; private set; }

		public Result? GetResultCode()
		{
			return ResultCode;
		}

		internal void Set(RegisterPlayersCallbackInfoInternal? other)
		{
			if (other != null)
			{
				ResultCode = other.Value.ResultCode;
				ClientData = other.Value.ClientData;
				RegisteredPlayers = other.Value.RegisteredPlayers;
				SanctionedPlayers = other.Value.SanctionedPlayers;
			}
		}

		public void Set(object other)
		{
			Set(other as RegisterPlayersCallbackInfoInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct RegisterPlayersCallbackInfoInternal : ICallbackInfoInternal
	{
		private Result m_ResultCode;
		private System.IntPtr m_ClientData;
		private System.IntPtr m_RegisteredPlayers;
		private uint m_RegisteredPlayersCount;
		private System.IntPtr m_SanctionedPlayers;
		private uint m_SanctionedPlayersCount;

		public Result ResultCode
		{
			get
			{
				return m_ResultCode;
			}
		}

		public object ClientData
		{
			get
			{
				object value;
				Helper.TryMarshalGet(m_ClientData, out value);
				return value;
			}
		}

		public System.IntPtr ClientDataAddress
		{
			get
			{
				return m_ClientData;
			}
		}

		public ProductUserId[] RegisteredPlayers
		{
			get
			{
				ProductUserId[] value;
				Helper.TryMarshalGetHandle(m_RegisteredPlayers, out value, m_RegisteredPlayersCount);
				return value;
			}
		}

		public ProductUserId[] SanctionedPlayers
		{
			get
			{
				ProductUserId[] value;
				Helper.TryMarshalGetHandle(m_SanctionedPlayers, out value, m_SanctionedPlayersCount);
				return value;
			}
		}
	}
}