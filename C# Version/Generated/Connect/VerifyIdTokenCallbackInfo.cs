// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Connect
{
	/// <summary>
	/// Output parameters for the <see cref="ConnectInterface.VerifyIdToken" /> Function.
	/// </summary>
	public class VerifyIdTokenCallbackInfo : ICallbackInfo, ISettable
	{
		/// <summary>
		/// The <see cref="Result" /> code for the operation. <see cref="Result.Success" /> indicates that the operation succeeded; other codes indicate errors.
		/// </summary>
		public Result ResultCode { get; private set; }

		/// <summary>
		/// Context that was passed into <see cref="ConnectInterface.VerifyIdToken" />
		/// </summary>
		public object ClientData { get; private set; }

		/// <summary>
		/// The Product User ID associated with the ID token.
		/// </summary>
		public ProductUserId ProductUserId { get; private set; }

		/// <summary>
		/// Flag set to indicate whether account information is available.
		/// Applications must always first check this value to be set before attempting
		/// to read the AccountType, AccountId, Platform and DeviceType fields.
		/// 
		/// This flag is always false for users that authenticated using EOS Connect Device ID.
		/// </summary>
		public bool IsAccountInfoPresent { get; private set; }

		/// <summary>
		/// The identity provider that the user authenticated with to EOS Connect.
		/// 
		/// If bIsAccountInfoPresent is set, this field describes the external account type.
		/// </summary>
		public ExternalAccountType AccountIdType { get; private set; }

		/// <summary>
		/// The external account ID of the authenticated user.
		/// 
		/// This value may be set to an empty string.
		/// </summary>
		public string AccountId { get; private set; }

		/// <summary>
		/// Platform that the user is connected from.
		/// 
		/// This value may be set to an empty string.
		/// </summary>
		public string Platform { get; private set; }

		/// <summary>
		/// Identifies the device type that the user is connected from.
		/// Can be used to securely verify that the user is connected through a real Console device.
		/// 
		/// This value may be set to an empty string.
		/// </summary>
		public string DeviceType { get; private set; }

		/// <summary>
		/// Client ID of the authorized client.
		/// </summary>
		public string ClientId { get; private set; }

		/// <summary>
		/// Product ID.
		/// </summary>
		public string ProductId { get; private set; }

		/// <summary>
		/// Sandbox ID.
		/// </summary>
		public string SandboxId { get; private set; }

		/// <summary>
		/// Deployment ID.
		/// </summary>
		public string DeploymentId { get; private set; }

		public Result? GetResultCode()
		{
			return ResultCode;
		}

		internal void Set(VerifyIdTokenCallbackInfoInternal? other)
		{
			if (other != null)
			{
				ResultCode = other.Value.ResultCode;
				ClientData = other.Value.ClientData;
				ProductUserId = other.Value.ProductUserId;
				IsAccountInfoPresent = other.Value.IsAccountInfoPresent;
				AccountIdType = other.Value.AccountIdType;
				AccountId = other.Value.AccountId;
				Platform = other.Value.Platform;
				DeviceType = other.Value.DeviceType;
				ClientId = other.Value.ClientId;
				ProductId = other.Value.ProductId;
				SandboxId = other.Value.SandboxId;
				DeploymentId = other.Value.DeploymentId;
			}
		}

		public void Set(object other)
		{
			Set(other as VerifyIdTokenCallbackInfoInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct VerifyIdTokenCallbackInfoInternal : ICallbackInfoInternal
	{
		private Result m_ResultCode;
		private System.IntPtr m_ClientData;
		private System.IntPtr m_ProductUserId;
		private int m_IsAccountInfoPresent;
		private ExternalAccountType m_AccountIdType;
		private System.IntPtr m_AccountId;
		private System.IntPtr m_Platform;
		private System.IntPtr m_DeviceType;
		private System.IntPtr m_ClientId;
		private System.IntPtr m_ProductId;
		private System.IntPtr m_SandboxId;
		private System.IntPtr m_DeploymentId;

		public Result ResultCode
		{
			get
			{
				return m_ResultCode;
			}
		}

		public object ClientData
		{
			get
			{
				object value;
				Helper.TryMarshalGet(m_ClientData, out value);
				return value;
			}
		}

		public System.IntPtr ClientDataAddress
		{
			get
			{
				return m_ClientData;
			}
		}

		public ProductUserId ProductUserId
		{
			get
			{
				ProductUserId value;
				Helper.TryMarshalGet(m_ProductUserId, out value);
				return value;
			}
		}

		public bool IsAccountInfoPresent
		{
			get
			{
				bool value;
				Helper.TryMarshalGet(m_IsAccountInfoPresent, out value);
				return value;
			}
		}

		public ExternalAccountType AccountIdType
		{
			get
			{
				return m_AccountIdType;
			}
		}

		public string AccountId
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_AccountId, out value);
				return value;
			}
		}

		public string Platform
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_Platform, out value);
				return value;
			}
		}

		public string DeviceType
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_DeviceType, out value);
				return value;
			}
		}

		public string ClientId
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_ClientId, out value);
				return value;
			}
		}

		public string ProductId
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_ProductId, out value);
				return value;
			}
		}

		public string SandboxId
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_SandboxId, out value);
				return value;
			}
		}

		public string DeploymentId
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_DeploymentId, out value);
				return value;
			}
		}
	}
}